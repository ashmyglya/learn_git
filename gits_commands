git`s commands list:
$ git init - создаёт в текущем каталоге новый подкаталог с именем .git
$ git add - добавить под версионный контроль файл и добавить их в индекс
$ git commit - добавить коммит
$ git status - используемый для определения, какие файлы в каком состоянии находятся
$ git diff - хочется знать, что конкретно поменялось, а не только какие файлы были изменены
$ git log - возможность посмотреть что было сделано — историю коммитов
$ git commit --amend - использует область подготовки (индекс) для внесения правок в коммит. Если вы ничего не меняли с момента последнего коммита (например, команда запущена сразу после предыдущего коммита), то снимок состояния останется в точности таким же, а всё что вы сможете изменить — это ваше сообщение к коммиту
$ git reset HEAD <file> - отменяет индексирование файла
$ git checkout - отменить существующие изменения
$ git branch - создает новую ветку, НО не переключается на неё
$ git checkout <branchname> - переключение на ветку
$ git log --oneline --decorate --graph --all - Для отображения истории коммитов, текущего положения указателей веток и истории ветвления
$ git checkout -b <newbranchname> - при создании новой ветки вы хотите сразу на неё переключиться
Начиная с Git версии 2.23, вы можете использовать git switch вместо git checkout, чтобы:
$ git switch testing-branch Переключиться на существующую ветку: .
$ git switch -c new-branch - Создать новую ветку и переключиться на нее
  Флаг -c означает создание, но также можно использовать полный формат:` --create`.
$ git switch - - Вернуться к предыдущей извлечённой ветке
