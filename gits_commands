git`s commands list:
$ git init - создаёт в текущем каталоге новый подкаталог с именем .git
$ git add - добавить под версионный контроль файл и добавить их в индекс
$ git commit - добавить коммит
$ git status - используемый для определения, какие файлы в каком состоянии находятся
$ git diff - хочется знать, что конкретно поменялось, а не только какие файлы были изменены
$ git log - возможность посмотреть что было сделано — историю коммитов
$ git commit --amend - использует область подготовки (индекс) для внесения правок в коммит. Если вы ничего не меняли с момента последнего коммита (например, команда запущена сразу после предыдущего коммита), то снимок состояния останется в точности таким же, а всё что вы сможете изменить — это ваше сообщение к коммиту
$ git reset HEAD <file> - отменяет индексирование файла
$ git checkout - отменить существующие изменения

#Remote
$ git remote - просмотреть список настроенных удалённых репозиториев
$ git remote add <shortname> <url> - добавить удалённый репозиторий и присвоить ему имя (shortname)
$ git pull <remote-name> - извлекает (fetch) данные с сервера, с которого вы изначально клонировали, и автоматически пытается слить (merge) их с кодом, над которым вы в данный момент работаете
$ git push <remote-name> <branch-name> - отправка доработок в удаленный репозиторий

# Branches
$ git branch - создает новую ветку, НО не переключается на неё. При запуске без параметров, вы получите простой список имеющихся у вас веток
$ git checkout <branchname> - переключение на ветку
$ git log --oneline --decorate --graph --all - Для отображения истории коммитов, текущего положения указателей веток и истории ветвления
$ git checkout -b <newbranchname> - при создании новой ветки вы хотите сразу на неё переключиться
Начиная с Git версии 2.23, вы можете использовать git switch вместо git checkout, чтобы:
$ git switch testing-branch Переключиться на существующую ветку: .
$ git switch -c new-branch - Создать новую ветку и переключиться на нее.  Флаг -c означает создание, но также можно использовать полный формат:` --create`.
$ git switch - - Вернуться к предыдущей извлечённой ветке
 $ git merge hotfix - проводим слияние с веткой hotfix (предварительно надо переключится в ту ветку, в которую надо залить изменения)
 $ git mergetool - использовать графический инструмент для разрешения конфликтов
$ git branch -d <branchname> - удаление ветки
$ git rebase <branchname> -  взять все изменения в текущей ветки и перенести их в <branchname>
